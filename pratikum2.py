# -*- coding: utf-8 -*-
"""Pratikum2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lK-YfisL7WNIkXjvo7jfGaN-gJlG7KJJ
"""

import sys
#versi python
print("Versi Python = {}".format(sys.version))

import numpy
#versi numpy
print("Versi Numpy = {}".format(numpy.__version__))

import pandas
#versi pandas
print("Versi Pandas = {}".format(pandas.__version__))

import matplotlib
#versi matplotlib
print("Versi Matplotlib = {}".format(matplotlib.__version__))

#membuat dasar numpy array
import numpy as np
np.array([1,2,3,4])

#array dengan tipe data, gunakan argumen dtype untuk tipe data
np.array([1,2,3,4],dtype=np.float32)

#jika nilai array berbeda-beda maka dilakukan upcast, contoh integer menjadi float
np.array([1,2,0,3,4])

#array multidimensi
np.array([[1,2,3,4],[5,6,7,8]])

#array zeros
np.zeros(5)
np.zeros((2,3))

#array ones
np.ones(5,dtype=np.int32)

#array random
np.random.rand(3,4)

#array buatan sendiri
np.full([2,3],8)

#identity matrix
np.eye(4)

"""

---


**Pratikum-02.np.arange() method:**
  1. Array berurutan
  2. Array dengan data awal dan akhir dengan jarak yang ditentukan"""

#array berurutan
np.arange(8)

#Array dengan data awal dan akhir dengan jarak yang ditentukan
np.arange(2,10,3)

#array berurutan dengan banyaknya data yang berimbang
np.linspace(0,1,5)

"""

---


**Pratikum-03 SHAPE AND RESHAPING NUMPY ARRAY**
  1. Dimensions of NumPy Array
  2. Shape of NumPy Array
  3. Size of NumPy Array 
  4. Reshaping a NumPy Array

"""

#number of axis
a = np.array([[5,10,15],[20,25,20]])
print('Array','\n',a)
print('Dimension','\n',a.ndim)

#shape of numpy array
a = np.array([[1,2,3],[4,5,6]])
print('Array :','\n',a)
print('Shape :','\n',a.shape)
print('Rows =',a.shape[0])
print('Columns =',a.shape[1])

#size of numpy array
a = np.array([[5,10,15],[20,25,30]])
print('Ukuran dari array:',a.size)
print('Manual determination of size of array :',a.shape[0]*a.shape[1])

"""

---


**PRATIKUM-04 Reshaping a NumPy Array**
  1. np.reshape()method, merubah ukuran array tanpa mengubah isi data
  2. mengubah ukuran array, jika tidak pasti kolom atau barisnya beri angka -1
  3. Flattening suatu NumPy array = ubah array jadi 1 dimensi
  4. Transpose Array"""

#reshape mengubah ukuran array sesuai ukuran yang diinginkan
a = np.array([3,6,9,5,1,2])
np.reshape(a,(2,3))

#mengubah array jika tidak diketahui ukurannya pastinya beri tanda -1
a = np.array([3,6,9,12,18,24])
print('Three Rows :','\n',np.reshape(a,(3,-1)))
print('Three Columns :', '\n',np.reshape(a,(-1,3)))

#np.ones((2,2))
a = np.array([[3,45,26],[53,51,52],[3,5,6]])
b = a.flatten()
c = a.ravel()
print('Original shape :', a.shape)
print('Array :','\n', a)
print('Shape setelah flatten :',b.shape)
print('Array :','\n', b)
print('Shape setelah ravel :',c.shape)
print('Array :','\n', c)

#tranpose array
a = np.array([[1,2,3],[4,5,6]])
b = np.transpose(a)
print('Original','\n',a.shape,'\n',a)
print('Ukuran array setelah transpose:','\n','Shape',b.shape,'\n',b)

"""

---


**PRAKTIKUM-05.Indexing dan Slocong of NumPy array**
  1. Slicing 1-D NumPy arrays
  2. Slicing 2-D NumPy arrays
  3. Slicing 3-D NumPy arrays"""

#Slicing 1-D NumPy arrays
a = np.array([1,2,3,4,5,6])
print(a[1:5:2])

a = np.array([1,2,3,4,5,6])
print(a[1:6:2])

a = np.array([1,2,3,4,5,6])
print(a[:6:2]) #tampilkann data dari indeks ke 1 sampai 6 dengan selisih 2
print(a[1::2])
print(a[1:6:])

#Slicing 2-D NumPy arrays
a = np.array([[1,2,3],[4,5,6]])
print(a)
print(a[0,0]) #baris 0 kolom 0
print(a[1,2])
print(a[1,0])

a = np.array([[1,2,3],[4,5,6]]) #[baris,kolom]
print(a)
#baris pertama
print('First row value :','\n',a[0:1,:])
#baris pertama dengan step
print('Alternate values from first row:','\n',a[0:1,::2])
print('Second column values :','\n',a[:,1::2])
print('Arbitrary values :','\n',a[0:1,1:3])

#Slicing 3-D NumPy arrays
a= np.array([[[1,2],[3,4],[5,6]], #first axis arrays
             [[7,8],[9,10],[11,12]], #second axis array
             [[13,14],[15,16],[17,18]]]) #third axis array
# 3-D array
print (a)
print(a.shape)

"""

---


**PRAKTIKUM-5.OPERASI MATEMATIKA**"""

a = np.arange(1,6)
b = np.arange(6,11)
print(a)
print(b)
print('Subtract :',a-5)
print('Multyply :',a*5)
print('Divide   :',a/5)
print('Power    :',a**2)
print('Remainder:',a%5)

a = np.arange(5,15,2)
print(a)
print('Mean :',np.mean(a))
print('Standard deviation :',np.std(a))
print('Median :',np.max(np.median(a)))

a = np.array([[1,6],[4,3]])
#minimum along a column
print('Min :',np.min(a,axis=0))
print('Max :',np.max(a,axis=1))

a = np.array([[5,6,7,4],[9,2,3,7]]) # sort aling the column
print('Sort along column :','\n',np.sort(a, kind='mergresort',axis=1))
print('Sort along row :','\n',np.sort(a, kind='mergresort',axis=0))

"""

---


**Pratikum NumPy dengan Dataset**"""

import csv
with open('/content/drive/MyDrive/Colab Notebooks/winequality-red.csv','r') as f:
  wines = list(csv.reader(f, delimiter=';'))

print(wines[:3])

import numpy as np
wines = np.array(wines[1:], dtype=np.float)

wines.dtype

(wines[3:])

qualities = [float(item[-1]) for item in wines[1:]]
sum(qualities) / len(qualities)

wines

wines.shape

wines = np.genfromtxt("/content/drive/MyDrive/Colab Notebooks/winequality-red.csv", delimiter=";", skip_header=1)

wines

wines[2,3]

#slicing
wines[0:3,3]

wines[:3,3]

wines[:,3]

wines[3,:]